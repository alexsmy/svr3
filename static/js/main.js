document.addEventListener('DOMContentLoaded', () => {
    const getInfoBtn = document.getElementById('get_info_btn');
    const loadingIndicator = document.getElementById('loading_indicator');
    const serverInfoOutput = document.getElementById('server_info_output');

    getInfoBtn.addEventListener('click', fetchServerInfo);

    async function fetchServerInfo() {
        getInfoBtn.disabled = true;
        loadingIndicator.style.display = 'block';
        serverInfoOutput.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        try {
            const response = await fetch('/get_server_info');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            displayServerInfo(data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:", error);
            serverInfoOutput.innerHTML = `<div class="info-item"><span class="label">–û—à–∏–±–∫–∞</span><span class="value">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ: ${error.message}</span></div>`;
        } finally {
            getInfoBtn.disabled = false;
            loadingIndicator.style.display = 'none';
        }
    }

    function displayServerInfo(data) {
        let html = '';

        // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if (data.location) {
            html += `
                <div class="info-item">
                    <span class="label">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</span>
                    <span class="value">${data.location.city}, ${data.location.country} <small>(${data.location.ip})</small></span>
                </div>
            `;
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°
        if (data.os) {
            html += `
                <div class="info-item">
                    <span class="label">üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</span>
                    <span class="value">${data.os.system} ${data.os.release} (${data.os.version})</span>
                    <ul>
                        <li><strong>–ò–º—è —É–∑–ª–∞:</strong> ${data.os.node_name}</li>
                        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> ${data.os.machine} (${data.os.processor_arch})</li>
                        <li><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (Uptime):</strong> ${data.os.uptime}</li>
                        <li><strong>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</strong> ${data.os.boot_time}</li>
                        <li><strong>–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> ${data.os.virtualization}</li>
                    </ul>
                </div>
            `;
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU
        if (data.cpu) {
            html += `
                <div class="info-item">
                    <span class="label">üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU)</span>
                    <span class="value">${data.cpu.model_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                    <ul>
                        <li><strong>–Ø–¥–µ—Ä:</strong> ${data.cpu.logical_cores} (—Ñ–∏–∑. ${data.cpu.physical_cores})</li>
                        <li><strong>–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:</strong> ${data.cpu.current_frequency_mhz} –ú–ì—Ü</li>
                        <li><strong>–ú–∏–Ω. —á–∞—Å—Ç–æ—Ç–∞:</strong> ${data.cpu.min_frequency_mhz} –ú–ì—Ü</li>
                        <li><strong>–ú–∞–∫—Å. —á–∞—Å—Ç–æ—Ç–∞:</strong> ${data.cpu.max_frequency_mhz} –ú–ì—Ü</li>
                        <li><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> ${data.cpu.usage_percent}%</li>
                        <li><strong>–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ (1/5/15 –º–∏–Ω):</strong> ${data.cpu.load_average_1_min} / ${data.cpu.load_average_5_min} / ${data.cpu.load_average_15_min}</li>
                    </ul>
                </div>
            `;
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAM
        if (data.memory) {
            html += `
                <div class="info-item">
                    <span class="label">üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å (RAM)</span>
                    <span class="value">–í—Å–µ–≥–æ: ${data.memory.total_gb} –ì–ë (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.memory.percent_used}%)</span>
                    <ul>
                        <li><strong>–î–æ—Å—Ç—É–ø–Ω–æ:</strong> ${data.memory.available_gb} –ì–ë</li>
                        <li><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</strong> ${data.memory.used_gb} –ì–ë</li>
                        <li><strong>Swap:</strong> ${data.memory.swap_total_gb} –ì–ë (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.memory.swap_percent_used}%)</li>
                    </ul>
                </div>
            `;
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
        if (data.disk_partitions && data.disk_partitions.length > 0) {
            let partitionHtml = '';
            data.disk_partitions.forEach(partition => {
                if (partition.error) {
                    partitionHtml += `<li><strong>${partition.mountpoint} (${partition.device}):</strong> ${partition.error}</li>`;
                } else {
                    partitionHtml += `<li><strong>${partition.mountpoint} (${partition.device}, ${partition.fstype}):</strong> ${partition.used_gb} –ì–ë –∏–∑ ${partition.total_gb} –ì–ë (${partition.percent_used}%)</li>`;
                }
            });
            html += `
                <div class="info-item">
                    <span class="label">üíΩ –î–∏—Å–∫–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã</span>
                    <ul>
                        ${partitionHtml}
                    </ul>
                </div>
            `;
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ–≤–æ–º I/O
        if (data.disk_io) {
            if (data.disk_io.error) {
                html += `
                    <div class="info-item">
                        <span class="label">üìä –î–∏—Å–∫–æ–≤—ã–π I/O</span>
                        <span class="value">${data.disk_io.error}</span>
                    </div>
                `;
            } else {
                html += `
                    <div class="info-item">
                        <span class="label">üìä –î–∏—Å–∫–æ–≤—ã–π I/O</span>
                        <span class="value">–ß—Ç–µ–Ω–∏–µ: ${data.disk_io.read_bytes_gb} –ì–ë / –ó–∞–ø–∏—Å—å: ${data.disk_io.write_bytes_gb} –ì–ë</span>
                        <ul>
                            <li><strong>–û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è:</strong> ${data.disk_io.read_count}</li>
                            <li><strong>–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏:</strong> ${data.disk_io.write_count}</li>
                        </ul>
                    </div>
                `;
            }
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python
        if (data.python) {
            html += `
                <div class="info-item">
                    <span class="label">üêç –°—Ä–µ–¥–∞ Python</span>
                    <span class="value">${data.python.version}</span>
                    <ul>
                        <li><strong>–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:</strong> ${data.python.executable}</li>
                        <li><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${data.python.platform}</li>
                    </ul>
                </div>
            `;
        }

        // –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        if (data.network_interfaces && Object.keys(data.network_interfaces).length > 0) {
            let interfaceList = '';
            for (const [name, ips] of Object.entries(data.network_interfaces)) {
                interfaceList += `<li><strong>${name}:</strong> ${ips.join(', ')}</li>`;
            }
            html += `
                <div class="info-item">
                    <span class="label">üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã</span>
                    <ul>
                        ${interfaceList}
                    </ul>
                </div>
            `;
        }

        // –°–µ—Ç–µ–≤–æ–π I/O
        if (data.network_io) {
            if (data.network_io.error) {
                html += `
                    <div class="info-item">
                        <span class="label">üìà –°–µ—Ç–µ–≤–æ–π I/O</span>
                        <span class="value">${data.network_io.error}</span>
                    </div>
                `;
            } else {
                html += `
                    <div class="info-item">
                        <span class="label">üìà –°–µ—Ç–µ–≤–æ–π I/O</span>
                        <span class="value">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${data.network_io.bytes_sent_gb} –ì–ë / –ü–æ–ª—É—á–µ–Ω–æ: ${data.network_io.bytes_recv_gb} –ì–ë</span>
                        <ul>
                            <li><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤:</strong> ${data.network_io.packets_sent}</li>
                            <li><strong>–ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤:</strong> ${data.network_io.packets_recv}</li>
                            <li><strong>–û—à–∏–±–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö:</strong> ${data.network_io.errin}</li>
                            <li><strong>–û—à–∏–±–æ–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö:</strong> ${data.network_io.errout}</li>
                            <li><strong>–ü–æ—Ç–µ—Ä—è–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö:</strong> ${data.network_io.dropin}</li>
                            <li><strong>–ü–æ—Ç–µ—Ä—è–Ω–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö:</strong> ${data.network_io.dropout}</li>
                        </ul>
                    </div>
                `;
            }
        }

        serverInfoOutput.innerHTML = html;
    }
});
